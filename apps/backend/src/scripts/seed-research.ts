// @ts-nocheck - Temporary fix for type errors during deployment
import 'reflect-metadata';
import { DataSource } from 'typeorm';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables
dotenv.config({ path: path.join(__dirname, '../../../../.env') });

async function seedResearch() {
  const dataSource = new DataSource({
    type: 'postgres',
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    username: process.env.DB_USERNAME || 'postgres',
    password: process.env.DB_PASSWORD || 'postgres',
    database: process.env.DB_NAME || 'my_journal',
    entities: ['apps/backend/src/database/entities/*.entity.ts'],
    synchronize: false,
  });

  try {
    await dataSource.initialize();
    console.log('โ Database connected');

    const researchRepository = dataSource.getRepository('research');
    const userRepository = dataSource.getRepository('users');

    // Get all researchers
    const researchers = await userRepository.find({
      where: { role: 'researcher' },
    });

    if (researchers.length === 0) {
      console.log('โ No researchers found. Please seed users first.');
      await dataSource.destroy();
      return;
    }

    console.log(`๐ Found ${researchers.length} researchers`);

    // Check existing research count
    const existingCount = await researchRepository.count();
    console.log(`๐ Current research count: ${existingCount}`);

    const specializations = [
      'ุนููู ุงูุญุงุณุจ',
      'ุงูุฐูุงุก ุงูุงุตุทูุงุนู',
      'ุงูุฃูู ุงูุณูุจุฑุงูู',
      'ููุฏุณุฉ ุงูุจุฑูุฌูุงุช',
      'ุนููู ุงูุจูุงูุงุช',
      'ุงูุดุจูุงุช ูุงูุงุชุตุงูุงุช',
      'ุงูุญูุณุจุฉ ุงูุณุญุงุจูุฉ',
      'ุฅูุชุฑูุช ุงูุฃุดูุงุก',
      'ุงููุงูุน ุงูุงูุชุฑุงุถู',
      'ุงูุจููู ุชุดูู',
    ];

    const statuses = [
      'under-review',
      'pending-editor-decision',
      'needs-revision',
      'accepted',
      'rejected',
      'published',
    ];

    const researchTitles = [
      'ุชุทุจููุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูุชุนููู ุงูุฅููุชุฑููู',
      'ุฃูู ุงููุนูููุงุช ูู ุงูุญูุณุจุฉ ุงูุณุญุงุจูุฉ',
      'ุชุญููู ุงูุจูุงูุงุช ุงูุถุฎูุฉ ุจุงุณุชุฎุฏุงู ุงูุชุนูู ุงูุขูู',
      'ุชุทููุฑ ุฃูุธูุฉ ุงููุดู ุนู ุงูุชุณูู ุงูุฅููุชุฑููู',
      'ุงุณุชุฎุฏุงู ุงูุจููู ุชุดูู ูู ุงูุฃูุธูุฉ ุงููุงููุฉ',
      'ุชุญุณูู ุฃุฏุงุก ุงูุดุจูุงุช ุงููุงุณูููุฉ',
      'ุชุทุจููุงุช ุฅูุชุฑูุช ุงูุฃุดูุงุก ูู ุงููุฏู ุงูุฐููุฉ',
      'ุงููุงูุน ุงููุนุฒุฒ ูู ุงูุชุฏุฑูุจ ุงูุทุจู',
      'ูุนุงูุฌุฉ ุงููุบุงุช ุงูุทุจูุนูุฉ ููุบุฉ ุงูุนุฑุจูุฉ',
      'ุฃูุธูุฉ ุงูุชูุตูุฉ ุงูุฐููุฉ ููุชุฌุงุฑุฉ ุงูุฅููุชุฑูููุฉ',
    ];

    const keywords = [
      ['ุฐูุงุก ุงุตุทูุงุนู', 'ุชุนูู ุขูู', 'ุดุจูุงุช ุนุตุจูุฉ'],
      ['ุฃูู ุณูุจุฑุงูู', 'ุชุดููุฑ', 'ุญูุงูุฉ ุงูุจูุงูุงุช'],
      ['ุจูุงูุงุช ุถุฎูุฉ', 'ุชุญููู ุจูุงูุงุช', 'ุงุณุชุฎุฑุงุฌ ูุนุฑูุฉ'],
      ['ุญูุณุจุฉ ุณุญุงุจูุฉ', 'ุฎุฏูุงุช ุณุญุงุจูุฉ', 'ุจููุฉ ุชุญุชูุฉ'],
      ['ุจููู ุชุดูู', 'ุนููุงุช ุฑูููุฉ', 'ุนููุฏ ุฐููุฉ'],
      ['ุดุจูุงุช', 'ุงุชุตุงูุงุช', 'ุจุฑูุชููููุงุช'],
      ['ุฅูุชุฑูุช ุงูุฃุดูุงุก', 'ุฃุฌูุฒุฉ ุฐููุฉ', 'ุงุณุชุดุนุงุฑ'],
      ['ูุงูุน ุงูุชุฑุงุถู', 'ูุงูุน ูุนุฒุฒ', 'ุชูุงุนู ุจุดุฑู'],
      ['ูุนุงูุฌุฉ ูุบุงุช', 'ูุบุฉ ุนุฑุจูุฉ', 'ุชุฑุฌูุฉ ุขููุฉ'],
      ['ุฃูุธูุฉ ุชูุตูุฉ', 'ุชุฎุตูุต', 'ุชุฌุฑุจุฉ ูุณุชุฎุฏู'],
    ];

    let createdCount = 0;
    const totalToCreate = 50; // ุนุฏุฏ ุงูุฃุจุญุงุซ ุงููุทููุจ ุฅูุดุงุคูุง

    for (let i = 0; i < totalToCreate; i++) {
      const randomUser = researchers[Math.floor(Math.random() * researchers.length)];
      const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
      const randomSpec = specializations[Math.floor(Math.random() * specializations.length)];
      const titleIndex = i % researchTitles.length;
      
      const submissionDate = new Date();
      submissionDate.setDate(submissionDate.getDate() - Math.floor(Math.random() * 180));

      const researchData: any = {
        user_id: randomUser.id,
        research_number: `R-${Date.now()}-${i.toString().padStart(4, '0')}`,
        title: `${researchTitles[titleIndex]} - ุฏุฑุงุณุฉ ${i + 1}`,
        title_en: `Research Study ${i + 1} on ${randomSpec}`,
        abstract: `ูุฐุง ุงูุจุญุซ ูุชูุงูู ููุถูุน ${researchTitles[titleIndex]} ูู ุฎูุงู ุฏุฑุงุณุฉ ุดุงููุฉ ุชูุฏู ุฅูู ุชุญููู ูุชูููู ุงูุฌูุงูุจ ุงููุฎุชููุฉ ููููุถูุน. ููุฏู ุงูุจุญุซ ูููุฌูุฉ ุนูููุฉ ูุชูุฏูุฉ ููุชุงุฆุฌ ูููุฉ ุชุณุงูู ูู ุชุทููุฑ ุงููุฌุงู.`,
        abstract_en: `This research addresses the topic through a comprehensive study aimed at analyzing and evaluating various aspects. The research presents an advanced scientific methodology and important results that contribute to the development of the field.`,
        keywords: keywords[titleIndex],
        keywords_en: ['AI', 'Machine Learning', 'Technology'],
        specialization: randomSpec,
        status: randomStatus,
        submission_date: submissionDate,
        views_count: Math.floor(Math.random() * 500),
        downloads_count: Math.floor(Math.random() * 200),
      };

      // ุฅุถุงูุฉ ุจูุงูุงุช ุญุณุจ ุงูุญุงูุฉ
      if (randomStatus === 'accepted' || 
          randomStatus === 'published' ||
          randomStatus === 'rejected') {
        const evalDate = new Date(submissionDate);
        evalDate.setDate(evalDate.getDate() + Math.floor(Math.random() * 60) + 30);
        researchData.evaluation_date = evalDate;
        researchData.average_rating = (Math.random() * 2 + 3).toFixed(2); // 3.00 to 5.00
      }

      if (randomStatus === 'published') {
        const pubDate = new Date(researchData.evaluation_date);
        pubDate.setDate(pubDate.getDate() + Math.floor(Math.random() * 30) + 15);
        researchData.published_date = pubDate;
      }

      const research = researchRepository.create(researchData);
      await researchRepository.save(research);
      createdCount++;

      if (createdCount % 10 === 0) {
        console.log(`โ Created ${createdCount}/${totalToCreate} research papers...`);
      }
    }

    console.log('\n๐ Summary:');
    console.log(`โ Successfully created ${createdCount} research papers!`);
    
    // ุนุฑุถ ุฅุญุตุงุฆูุงุช ุญุณุจ ุงูุญุงูุฉ
    for (const status of statuses) {
      const count = await researchRepository.count({ where: { status } });
      console.log(`   - ${status}: ${count} papers`);
    }

    await dataSource.destroy();
  } catch (error) {
    console.error('โ Error seeding research:', error);
    process.exit(1);
  }
}

seedResearch();
